import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.datasets import load_iris

# Load iris dataset
iris = load_iris()

# Create DataFrame
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['target'] = iris.target

# Input features and target
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

print("First 5 input rows:\n", X.head())

# Train-Test Split
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.10, random_state=42)

# Train KNN classifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(Xtrain, ytrain)

# Predict on test set
ypred = classifier.predict(Xtest)

# Display predictions
print("\n-------------------------------------------------------------------------")
print('%-25s %-25s %-25s' % ('Original Label', 'Predicted Label', 'Correct/Wrong'))
print("-------------------------------------------------------------------------")

for i in range(len(ytest)):
    print('%-25s %-25s' % (ytest.iloc[i], ypred[i]), end="")
    if ytest.iloc[i] == ypred[i]:
        print('%-25s' % 'Correct')
    else:
        print('%-25s' % 'Wrong')

print("-------------------------------------------------------------------------")
print("\nConfusion Matrix:\n", metrics.confusion_matrix(ytest, ypred))
print("-------------------------------------------------------------------------")
print("\nClassification Report:\n", metrics.classification_report(ytest, ypred))
print("-------------------------------------------------------------------------")
print('Accuracy of the classifier is %0.2f' % metrics.accuracy_score(ytest, ypred))
print("-------------------------------------------------------------------------")




#  First 5 input rows:
    sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)
0                5.1               3.5                1.4               0.2
1                4.9               3.0                1.4               0.2
2                4.7               3.2                1.3               0.2
3                4.6               3.1                1.5               0.2
4                5.0               3.6                1.4               0.2

-------------------------------------------------------------------------
Original Label            Predicted Label           Correct/Wrong            
-------------------------------------------------------------------------
1                         1                        Correct                  
0                         0                        Correct                  
2                         2                        Correct                  
1                         1                        Correct                  
1                         1                        Correct                  
0                         0                        Correct                  
1                         1                        Correct                  
2                         2                        Correct                  
1                         1                        Correct                  
1                         1                        Correct                  
2                         2                        Correct                  
0                         0                        Correct                  
0                         0                        Correct                  
0                         0                        Correct                  
...

-------------------------------------------------------------------------
Accuracy of the classifier is 1.00
-----------------------------------------------------------------
